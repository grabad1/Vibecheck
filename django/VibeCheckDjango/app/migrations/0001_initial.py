# Generated by Django 5.2.6 on 2025-10-08 20:35

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('idplaylist', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=45)),
            ],
            options={
                'db_table': 'playlist',
            },
        ),
        migrations.CreateModel(
            name='Requestfriendship',
            fields=[
                ('idrf', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'requestfriendship',
            },
        ),
        migrations.CreateModel(
            name='Song',
            fields=[
                ('idsong', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=45)),
                ('link', models.CharField(max_length=150)),
                ('artist', models.CharField(blank=True, max_length=45, null=True)),
                ('imagelink', models.CharField(blank=True, max_length=150, null=True)),
                ('duration', models.IntegerField(blank=True, null=True)),
                ('spotify_id', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'db_table': 'song',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('iduser', models.AutoField(db_column='idUser', primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=45, unique=True)),
                ('email', models.CharField(max_length=45, unique=True)),
                ('password', models.CharField(max_length=45)),
                ('type', models.CharField(max_length=9)),
            ],
            options={
                'db_table': 'user',
            },
        ),
        migrations.CreateModel(
            name='Created',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('trending', models.IntegerField(blank=True, null=True)),
                ('idplaylist', models.ForeignKey(db_column='idplaylist', on_delete=django.db.models.deletion.DO_NOTHING, to='app.playlist')),
                ('iduser', models.ForeignKey(db_column='iduser', on_delete=django.db.models.deletion.DO_NOTHING, to='app.user')),
            ],
            options={
                'db_table': 'created',
            },
        ),
        migrations.CreateModel(
            name='Collab',
            fields=[
                ('idcollab', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=45)),
                ('idplaylist', models.ForeignKey(blank=True, db_column='idplaylist', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.playlist')),
                ('iduser', models.ForeignKey(db_column='iduser', on_delete=django.db.models.deletion.DO_NOTHING, to='app.user')),
            ],
            options={
                'db_table': 'collab',
            },
        ),
        migrations.CreateModel(
            name='Friendship',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.requestfriendship')),
            ],
            options={
                'db_table': 'friendship',
            },
        ),
        migrations.AddField(
            model_name='requestfriendship',
            name='iduserrecieve',
            field=models.ForeignKey(db_column='iduserrecieve', on_delete=django.db.models.deletion.DO_NOTHING, related_name='friend_requests_received', to='app.user'),
        ),
        migrations.AddField(
            model_name='requestfriendship',
            name='idusersend',
            field=models.ForeignKey(db_column='idusersend', on_delete=django.db.models.deletion.DO_NOTHING, related_name='friend_requests_sent', to='app.user'),
        ),
        migrations.CreateModel(
            name='Requestcollab',
            fields=[
                ('idrc', models.AutoField(primary_key=True, serialize=False)),
                ('idcollab', models.ForeignKey(db_column='idcollab', on_delete=django.db.models.deletion.DO_NOTHING, to='app.collab')),
                ('iduserrecieve', models.ForeignKey(db_column='iduserrecieve', on_delete=django.db.models.deletion.DO_NOTHING, related_name='requestcollab_received', to='app.user')),
                ('idusersend', models.ForeignKey(db_column='idusersend', on_delete=django.db.models.deletion.DO_NOTHING, to='app.user')),
            ],
            options={
                'db_table': 'requestcollab',
            },
        ),
        migrations.CreateModel(
            name='Rated',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.created')),
                ('iduser', models.ForeignKey(db_column='iduser', on_delete=django.db.models.deletion.DO_NOTHING, to='app.user')),
            ],
            options={
                'db_table': 'rated',
            },
        ),
        migrations.CreateModel(
            name='Purchased',
            fields=[
                ('idpur', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField()),
                ('iduser', models.ForeignKey(db_column='iduser', on_delete=django.db.models.deletion.DO_NOTHING, to='app.user')),
            ],
            options={
                'db_table': 'purchased',
            },
        ),
        migrations.CreateModel(
            name='Participated',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('idcollab', models.ForeignKey(db_column='idcollab', on_delete=django.db.models.deletion.DO_NOTHING, to='app.collab')),
                ('iduser', models.ForeignKey(db_column='iduser', on_delete=django.db.models.deletion.DO_NOTHING, to='app.user')),
            ],
            options={
                'db_table': 'participated',
            },
        ),
        migrations.CreateModel(
            name='Liked',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.created')),
                ('iduser', models.ForeignKey(db_column='iduser', on_delete=django.db.models.deletion.DO_NOTHING, to='app.user')),
            ],
            options={
                'db_table': 'liked',
            },
        ),
        migrations.CreateModel(
            name='Contains',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('idplaylist', models.ForeignKey(db_column='idplaylist', on_delete=django.db.models.deletion.DO_NOTHING, to='app.playlist')),
                ('idsong', models.ForeignKey(db_column='idsong', on_delete=django.db.models.deletion.DO_NOTHING, to='app.song')),
                ('iduser', models.ForeignKey(db_column='iduser', on_delete=django.db.models.deletion.DO_NOTHING, to='app.user')),
            ],
            options={
                'db_table': 'contains',
            },
        ),
        migrations.AddConstraint(
            model_name='requestfriendship',
            constraint=models.UniqueConstraint(fields=('idusersend', 'iduserrecieve'), name='unique_friend_request'),
        ),
        migrations.AddConstraint(
            model_name='rated',
            constraint=models.UniqueConstraint(fields=('created', 'iduser'), name='unique_rated'),
        ),
        migrations.AddConstraint(
            model_name='liked',
            constraint=models.UniqueConstraint(fields=('created', 'iduser'), name='unique_liked'),
        ),
        migrations.AddConstraint(
            model_name='created',
            constraint=models.UniqueConstraint(fields=('iduser', 'idplaylist'), name='unique_created'),
        ),
        migrations.AddConstraint(
            model_name='contains',
            constraint=models.UniqueConstraint(fields=('idplaylist', 'idsong'), name='unique_playlist_song'),
        ),
    ]
